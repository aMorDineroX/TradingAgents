#!/usr/bin/env python3
"""
Script de configuration pour TradingAgents Web Interface
Cr√©e tous les r√©pertoires n√©cessaires et v√©rifie la configuration
"""

import os
import sys
from pathlib import Path

def create_directories():
    """Cr√©er tous les r√©pertoires n√©cessaires"""
    directories = [
        "results",
        "configs", 
        "templates",
        "static",
        "static/css",
        "static/js"
    ]
    
    print("üìÅ Cr√©ation des r√©pertoires n√©cessaires...")
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"   ‚úÖ {directory}/")
    
    print("‚úÖ Tous les r√©pertoires ont √©t√© cr√©√©s")

def check_files():
    """V√©rifier que tous les fichiers n√©cessaires existent"""
    required_files = [
        "app.py",
        "config_manager.py", 
        "run.py",
        "requirements.txt",
        "templates/base.html",
        "templates/index.html",
        "templates/dashboard.html",
        "templates/config.html",
        "static/css/custom.css",
        "static/js/app.js"
    ]
    
    print("\nüìÑ V√©rification des fichiers...")
    missing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - MANQUANT")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  {len(missing_files)} fichier(s) manquant(s)")
        return False
    else:
        print("\n‚úÖ Tous les fichiers requis sont pr√©sents")
        return True

def check_environment():
    """V√©rifier les variables d'environnement"""
    print("\nüîë V√©rification des variables d'environnement...")
    
    # Charger le fichier .env s'il existe
    env_file = Path("../.env")
    if env_file.exists():
        print(f"üìÑ Chargement du fichier .env depuis: {env_file.absolute()}")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
    
    # V√©rifier les cl√©s
    required_keys = ['FINNHUB_API_KEY']
    llm_keys = ['OPENAI_API_KEY', 'GROQ_API_KEY', 'ANTHROPIC_API_KEY', 'GOOGLE_API_KEY']
    
    # V√©rifier les cl√©s obligatoires
    missing_required = []
    for key in required_keys:
        if os.getenv(key):
            print(f"   ‚úÖ {key}")
        else:
            print(f"   ‚ùå {key} - MANQUANT")
            missing_required.append(key)
    
    # V√©rifier qu'au moins une cl√© LLM est pr√©sente
    llm_found = False
    for key in llm_keys:
        if os.getenv(key):
            print(f"   ‚úÖ {key}")
            llm_found = True
        else:
            print(f"   ‚ö™ {key} - optionnel")
    
    if not llm_found:
        print("   ‚ùå Aucune cl√© LLM trouv√©e")
        missing_required.append("Au moins une cl√© LLM")
    
    return len(missing_required) == 0

def main():
    """Fonction principale"""
    print("üîß Configuration de TradingAgents Web Interface")
    print("=" * 60)
    
    # Cr√©er les r√©pertoires
    create_directories()
    
    # V√©rifier les fichiers
    files_ok = check_files()
    
    # V√©rifier l'environnement
    env_ok = check_environment()
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA CONFIGURATION")
    print("=" * 60)
    
    if files_ok and env_ok:
        print("üéâ Configuration compl√®te ! Vous pouvez d√©marrer l'application:")
        print("   python run.py")
        print("   ou")
        print("   python run_groq.py")
    else:
        print("‚ö†Ô∏è  Configuration incompl√®te:")
        if not files_ok:
            print("   - Certains fichiers sont manquants")
        if not env_ok:
            print("   - Variables d'environnement manquantes")
        print("\nVeuillez corriger ces probl√®mes avant de d√©marrer l'application.")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
