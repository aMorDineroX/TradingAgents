"""
Script de test pour l'application BingX
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bingxapp.config import BingXConfig
from bingxapp.client import BingXClient
from bingxapp.trading_bot import TradingBot


def test_config():
    """Test de la configuration"""
    print("üîß Test de la configuration...")
    
    config = BingXConfig.from_env()
    print(f"‚úÖ API URL: {config.api_url}")
    print(f"‚úÖ Use Testnet: {config.use_testnet}")
    print(f"‚úÖ Timeout: {config.timeout}")
    print(f"‚úÖ API Key: {config.api_key[:10]}...")
    print(f"‚úÖ Secret Key: {config.secret_key[:10]}...")


def test_client():
    """Test du client BingX"""
    print("\nüîå Test du client BingX...")
    
    config = BingXConfig.from_env()
    client = BingXClient(config)
    
    # Test de connectivit√©
    if client.test_connectivity():
        print("‚úÖ Connectivit√© OK")
        
        try:
            # Test de l'heure du serveur
            server_time = client.get_server_time()
            print(f"‚úÖ Heure du serveur: {server_time}")
            
            # Test des informations de symboles
            symbols = client.get_symbol_info()
            print(f"‚úÖ Nombre de symboles disponibles: {len(symbols.get('data', []))}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors des tests du client: {e}")
    else:
        print("‚ùå √âchec de la connectivit√©")


def test_bot():
    """Test du bot de trading"""
    print("\nü§ñ Test du bot de trading...")
    
    config = BingXConfig.from_env()
    bot = TradingBot(config)
    
    if bot.initialize():
        print("‚úÖ Bot initialis√© avec succ√®s")
        
        try:
            # Test du solde
            balance = bot.get_account_balance()
            print(f"‚úÖ Solde r√©cup√©r√©: {len(balance)} √©l√©ments")
            
            # Test des donn√©es de march√©
            market_data = bot.get_market_data("BTC-USDT")
            if market_data:
                print("‚úÖ Donn√©es de march√© r√©cup√©r√©es")
            else:
                print("‚ö†Ô∏è  Aucune donn√©e de march√©")
            
            # Test des positions
            positions = bot.get_positions()
            print(f"‚úÖ Positions r√©cup√©r√©es: {len(positions)} positions")
            
        except Exception as e:
            print(f"‚ùå Erreur lors des tests du bot: {e}")
    else:
        print("‚ùå √âchec de l'initialisation du bot")


def main():
    """Fonction principale de test"""
    print("üöÄ Tests de l'application BingX")
    print("=" * 50)
    
    try:
        test_config()
        test_client()
        test_bot()
        
        print("\n‚úÖ Tous les tests termin√©s!")
        print("\nüìã Commandes disponibles:")
        print("  python -m bingxapp.main test")
        print("  python -m bingxapp.main market BTC-USDT")
        print("  python -m bingxapp.main positions")
        print("  python -m bingxapp.main monitor BTC-USDT ETH-USDT")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
